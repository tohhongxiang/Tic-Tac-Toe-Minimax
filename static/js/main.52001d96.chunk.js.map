{"version":3,"sources":["components/Board.js","index.js","App.js"],"names":["SYMBOLS","generateBoard","size","_size","parseInt","board","i","push","Array","fill","scores","O","X","minimax","depth","isMaximising","winner","checkWinner","bestScore","Infinity","length","j","score","Math","max","min","every","elem","cols","diagonal1","e","diagonal2","flat","spot","Board","useState","boardSize","setBoardSize","setBoard","turn","setTurn","setWinner","playTurn","currentPlayer","boardCopy","map","row","_winner","setTimeout","playComputerTurn","bestMove","b","className","key","column","onClick","displayBoard","type","value","onChange","target","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.52001d96.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nconst SYMBOLS = ['X', 'O']\n\nconst generateBoard = (size) => {\n    let _size = parseInt(size)\n    let board = [];\n    for (let i = 0; i < _size; i++) {\n        board.push(Array(_size).fill(''))\n    }\n\n    return board;\n}\n\nconst scores = {\n    O: 1,\n    X: -1,\n    'Nobody': 0\n}\n\nconst minimax = (board, depth, isMaximising) => {\n    let winner = checkWinner(board)\n\n    if (winner !== null) {\n        return scores[winner] / depth\n    }\n\n    if (depth > 2) {\n        return 0\n    }\n\n    if (isMaximising) {\n        let bestScore = -Infinity\n        for (let i = 0; i < board.length; i++) {\n            for (let j = 0; j < board.length; j++) {\n                if (board[i][j] === '') {\n                    board[i][j] = 'O'\n                    let score = minimax(board, depth + 1, false)\n                    board[i][j] = '';\n\n                    bestScore = Math.max(bestScore, score)\n                }\n            }\n        }\n\n        return bestScore;\n    } else {\n        let bestScore = Infinity\n        for (let i = 0; i < board.length; i++) {\n            for (let j = 0; j < board.length; j++) {\n                if (board[i][j] === '') {\n                    board[i][j] = 'X'\n                    let score = minimax(board, depth + 1, true)\n                    board[i][j] = '';\n\n                    bestScore = Math.min(score, bestScore)\n                }\n            }\n        }\n        return bestScore;\n    }\n}\n\nconst checkWinner = (board) => {\n    // rows\n    for (let i = 0; i < board.length; i++) {\n        if (board[i].every(elem => elem === board[i][0] && elem !== '')) {\n            return board[i][0]\n        }\n    }\n\n    // col\n    for (let i = 0; i < board[0].length; i++) {\n        let cols = []\n        for (let j = 0; j < board.length; j++) {\n            cols.push(board[j][i])\n        }\n\n        if (cols.every(elem => elem === cols[0] && elem !== '')) {\n            return cols[0]\n        }\n    }\n\n    const diagonal1 = []\n    for (let i = 0; i < board.length; i++) {\n        diagonal1.push(board[i][i])\n    }\n\n    if (diagonal1.every(e => e === diagonal1[0] && e !== '')) {\n        return diagonal1[0]\n    }\n\n    const diagonal2 = []\n    for (let i = 0; i < board.length; i++) {\n        diagonal2.push(board[i][board.length - 1 - i])\n    }\n\n    if (diagonal2.every(e => e === diagonal2[0] && e !== '')) {\n        return diagonal2[0]\n    }\n\n    // full board\n    const spots = board.flat()\n    if (spots.every(spot => spot !== '')) {\n        return 'Nobody'\n    }\n\n    return null\n}\n\nexport default function Board() {\n    const [boardSize, setBoardSize] = useState(3)\n    const [board, setBoard] = useState(generateBoard(boardSize))\n\n    const [turn, setTurn] = useState(0)\n    const [winner, setWinner] = useState(null);\n\n    const playTurn = (i, j, turn, board) => () => {\n        const currentPlayer = SYMBOLS[turn % 2]\n        if (winner) {\n            return false\n        }\n\n        const boardCopy = [...board.map(row => row)]\n\n        if (boardCopy[i][j] !== '') {\n            return false\n        }\n\n        boardCopy[i][j] = currentPlayer\n        setTurn(turn => turn = turn + 1)\n        const _winner = checkWinner(boardCopy);\n\n        setBoard(boardCopy)\n\n        if (!_winner) {\n            setTimeout(() => {\n                playComputerTurn(turn + 1, board)\n\n            }, 100)\n        } else {\n            setWinner(_winner)\n        }\n\n        return true\n    }\n\n    const playComputerTurn = (turn, board) => {\n        let bestScore = -Infinity;\n        let bestMove;\n        const currentPlayer = SYMBOLS[turn % 2]\n        const boardCopy = [...board.map(b => [...b])]\n\n        for (let i = 0; i < board.length; i++) {\n            for (let j = 0; j < board[i].length; j++) {\n                if (board[i][j] === '') {\n                    boardCopy[i][j] = 'O';\n                    let score = minimax(boardCopy, 0, false);\n                    boardCopy[i][j] = ''\n                    if (score >= bestScore) {\n                        bestScore = score;\n                        bestMove = { i, j }\n                    }\n                }\n            }\n        }\n\n        if (!bestMove) {\n            return\n        }\n\n        const { i, j } = bestMove;\n\n        boardCopy[i][j] = currentPlayer;\n\n        setTurn(turn => turn = turn + 1)\n        setBoard(boardCopy)\n\n        const _winner = checkWinner(boardCopy)\n        if (_winner) {\n            setWinner(_winner)\n        }\n    }\n\n    const resetGame = () => {\n        setBoard(generateBoard(boardSize))\n        setWinner(null);\n        setTurn(0)\n    }\n\n    const displayBoard = (board) => {\n        return (\n            <div className=\"board\">\n                {\n                    board.map((row, i) => {\n                        return (\n                            <div className=\"row\" key={i}>\n                                {row.map((column, j) => <div key={j} className=\"cell\" onClick={playTurn(i, j, turn, board)}>{column}</div>)}\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"container\">\n            {winner ? <p>{winner} wins</p> : null}\n            {displayBoard(board)}\n            {!winner ? <p>Current player: {SYMBOLS[turn % SYMBOLS.length]}</p> : null}\n            <input type=\"number\" value={boardSize} onChange={e => setBoardSize(e.target.value)} />\n            <button onClick={resetGame}>Reset game</button>\n        </div>\n    )\n}\n","import App from './App'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nReactDOM.render(<App />, document.querySelector('#root'))","import React from 'react'\nimport Board from './components/Board'\nimport './App.css'\n\nexport default function App() {\n    return (\n        <div className=\"center\">\n            <Board />\n        </div>\n    )\n}\n"],"sourceRoot":""}